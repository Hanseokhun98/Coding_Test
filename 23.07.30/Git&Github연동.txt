<Git&Git Hub 사용법>
작성자 : 한 석 훈

출처: mailto:https://www.youtube.com/watch?v=lelVripbt2M&ab_channel=%EC%BD%94%EB%94%A9%EC%95%8C%EB%A0%A4%EC%A3%BC%EB%8A%94%EB%88%84%EB%82%98

1.	Github 검색
(1-2)	Github 가입 (Sign up)
(1-3)	로그인하기
(1-4)	New 버튼 클릭
(1-5)	프로젝트 이름 써주기
        Public or Private : Public 경우 모든 사용자들이 코드 검색 가능 (보통 Public으로 설정)
(1-6)	Create Repository 클릭

2. Git 검색후 운영체제 맞는 git 설치 (계속 next 누르면됨)
(2-1) 다운로드후 Git bash 검색후 실행
    Git을 처음 쓸 때 환경설정을 해줘야됨
(2-2) git config –global user.name “your_name” 치기
(2-3) git config –global user.email “your_email” 치기
    “your_email” 가입시 등록한 이메일 입력
(2-4) git config –list (user.name 이랑 user.email 확인하기)
	




<내 프로젝트 올리기>
1.	Vscode 내 Terminal -> new Terminal ->
(2-1) git init (맨 처음에 프로젝트 올릴 때)
(2-2) git add . ( . 은 전부 다 라는뜻, 프로젝트 내 모든 파일을 올릴때)
    git add index.html (특정 한 파일만 올릴 때)
(2-3) git status (add 명령어 이후 어떤 파일을 추가할 수 있는지 확인하는 명령어, 굳이 필요하진 않음)
(2-4) git commit -m “first commit” (히스토리 만들기)
(최종 -> 찐최종 -> 진짜최종 이런 느낌)
(2-5) git remote add origin git@github.com:legobitna/first-noona-project.git(프로젝트와의 연결고리 만들기)
(2-6) git remote -v (프로젝트 주소가 나오면 연결고리가 생긴 것!)
(2-7) git push origin master (마스터 브랜치로 보낸다)
(2-8) 페이지 새로고침 후 확인

<특정 파일 내용 업데이트하고싶다>
1.	git add .
(1-2) git status
2.	git commit -m “second commit”
3.	git push origin master

Git Hub 의 기능: 코드 올리고, 버전 관리도 하고, 공유도 하고, 협업도 가능
<협업을 해야하는 공동 프로젝트 개발>
(회사 CEO)
1.	New terminal -> git init (처음이니까) -> git add .
2.	git commit -m “first commit”
3.	git remote add …. (연결고리 만들기)
4.	git push origin master (레퍼지토리 업로드)

회사의 CEO가 신입에게 git hub 의 레포지토리 내에있는 프로젝트 폴더 다운 받으라고함
(신입) cmd 창을 통해 특정 폴더(다운받을 폴더)로 이동
1.	해당 프로젝트 폴더 git clone
2.	git clone (해당 프로젝트가 닮긴 온라인 레포지토리 주소) git freshman (해당 폴더내 해당 파일을 닮은 폴더 지정할 수 있음)
3.	cd freshman (해당 폴더로 이동) -> code .
4.	해당 파일의 코드수정 완료
5.	git add .
6.	git commit -m “freshman first commit”
7.	git push origin master (하면은 ㅈㄴ 욕먹는거) master 브랜치에 바로 넣지 못함 
8.	git checkout -b freshman (master -> freshman) (작업을 위한 새로운 브랜치 공간을 만들어줌)
9.	git push origin freshman
 
	Compare & pull request 눌러줌
- 작업에 관한 내용 설명 및 코드 확인 부탁 등등 
	Create pull request (master 에 갈 수 있게 허락해주세요라는 요청이라고 보면됨)

(회사 CEO)
1.	브랜치 선택
2.	Pull request 에 변경된 브랜치 내용 확인
3.	Freshman 의 commit 내용 확인할 수 있음
(3-1) 마음에 안든다? Review changes 를 함
(3-2) 괜찮은데? 마스터로 보내도 될것같애
(주의: 엄청나게 많은 책임이 따름)
 
(회사 CEO)
1.	리더도 개발중이었음. (마스터에 새로운 코드가 생김, 버전이 다름)
2.	Master 에 변화가 생기면 해당 버전과 동기화를 시켜줘야함
3.	그동안 작업중인 코드를 저장을 해줘야됨
(3-1) git add .
(3-2) git commit -m “second commit”
(3-3) push는 하지 않음!!
4.	git pull origin master (master로부터 새로운 소스 코드를 받아온다.)
(신입의 코드가 나한테 들어와서 변경이 됨)
5.	git push origin master (동기화 이후 작업한 코드 전송)
(신입 + 리더 코드 둘다 마스터에게 들어가게 됨)

Pull -> push -> pull -> push -> pull -> push 반복!!
